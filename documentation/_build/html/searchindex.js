Search.setIndex({docnames:["index","mmlib4j/debug/Debug","mmlib4j/debug/DebugNone","mmlib4j/debug/DebugTask","mmlib4j/debug/DebugTime","mmlib4j/debug/package-index","mmlib4j/features/ExtractFeatures","mmlib4j/features/Feature","mmlib4j/features/FeatureBody","mmlib4j/features/MeanVolumeFeatureR","mmlib4j/features/MserFeature","mmlib4j/features/NormalFeature","mmlib4j/features/package-index","mmlib4j/files/DataFile","mmlib4j/files/DataGroup","mmlib4j/files/DataLoader","mmlib4j/files/DataWriter","mmlib4j/files/GroupByNumber","mmlib4j/files/package-index","mmlib4j/models/Models","mmlib4j/models/datastruct/AbstractMatrix","mmlib4j/models/datastruct/Algebra","mmlib4j/models/datastruct/Float32","mmlib4j/models/datastruct/Float64","mmlib4j/models/datastruct/Matrix","mmlib4j/models/datastruct/package-index","mmlib4j/models/linear/Classifier","mmlib4j/models/linear/ClassifierFloat32","mmlib4j/models/linear/ClassifierFloat64","mmlib4j/models/linear/LinearRegression","mmlib4j/models/linear/LogisticRegression","mmlib4j/models/linear/Regression","mmlib4j/models/linear/RegressionFloat32","mmlib4j/models/linear/RegressionFloat64","mmlib4j/models/linear/package-index","mmlib4j/models/neural_network/Layer","mmlib4j/models/neural_network/MLP","mmlib4j/models/neural_network/Network","mmlib4j/models/neural_network/NetworkFloat32","mmlib4j/models/neural_network/NetworkFloat64","mmlib4j/models/neural_network/package-index","mmlib4j/models/package-index","mmlib4j/models/postprocessing/PostProcessing","mmlib4j/models/postprocessing/PostProcessingBinary","mmlib4j/models/postprocessing/PostProcessingIdentity","mmlib4j/models/postprocessing/PostProcessingLinear","mmlib4j/models/postprocessing/PostProcessingMulticlass","mmlib4j/models/postprocessing/package-index","mmlib4j/models/preprocessing/IdentityScaler","mmlib4j/models/preprocessing/Mean","mmlib4j/models/preprocessing/MinMax","mmlib4j/models/preprocessing/Scaler","mmlib4j/models/preprocessing/StandardDeviation","mmlib4j/models/preprocessing/Zscore","mmlib4j/models/preprocessing/package-index","mmlib4j/models/svm/BinarySVC","mmlib4j/models/svm/ClassifierSVC","mmlib4j/models/svm/ClassifierSVCFloat32","mmlib4j/models/svm/ClassifierSVCFloat64","mmlib4j/models/svm/LinearClassifierSVC","mmlib4j/models/svm/LinearClassifierSVCFloat32","mmlib4j/models/svm/LinearClassifierSVCFloat64","mmlib4j/models/svm/LinearSVC","mmlib4j/models/svm/MulticlassSVC","mmlib4j/models/svm/MulticlassStrategy","mmlib4j/models/svm/OneVsOneFloat32","mmlib4j/models/svm/OneVsOneFloat64","mmlib4j/models/svm/SVC","mmlib4j/models/svm/kernels/Kernel","mmlib4j/models/svm/kernels/Linear","mmlib4j/models/svm/kernels/Poly","mmlib4j/models/svm/kernels/Rbf","mmlib4j/models/svm/kernels/Sigmoid","mmlib4j/models/svm/kernels/package-index","mmlib4j/models/svm/package-index","mmlib4j/models/svr/LinearRegressorSVR","mmlib4j/models/svr/LinearRegressorSVRFloat32","mmlib4j/models/svr/LinearRegressorSVRFloat64","mmlib4j/models/svr/LinearSVR","mmlib4j/models/svr/RegressorSVR","mmlib4j/models/svr/RegressorSVRFloat32","mmlib4j/models/svr/RegressorSVRFloat64","mmlib4j/models/svr/SVR","mmlib4j/models/svr/package-index","mmlib4j/models/transfer/Identity","mmlib4j/models/transfer/Logistic","mmlib4j/models/transfer/Relu","mmlib4j/models/transfer/Softmax","mmlib4j/models/transfer/Tanh","mmlib4j/models/transfer/Transfer","mmlib4j/models/transfer/package-index","mmlib4j/primitives/Primitives","mmlib4j/primitives/package-index","mmlib4j/targets/BoundBox","mmlib4j/targets/BoundingBoxMatching","mmlib4j/targets/ShapeMatching","mmlib4j/targets/Target","mmlib4j/targets/package-index","mmlib4j/utils/Random","mmlib4j/utils/package-index","packages"],envversion:53,filenames:["index.rst","mmlib4j/debug/Debug.rst","mmlib4j/debug/DebugNone.rst","mmlib4j/debug/DebugTask.rst","mmlib4j/debug/DebugTime.rst","mmlib4j/debug/package-index.rst","mmlib4j/features/ExtractFeatures.rst","mmlib4j/features/Feature.rst","mmlib4j/features/FeatureBody.rst","mmlib4j/features/MeanVolumeFeatureR.rst","mmlib4j/features/MserFeature.rst","mmlib4j/features/NormalFeature.rst","mmlib4j/features/package-index.rst","mmlib4j/files/DataFile.rst","mmlib4j/files/DataGroup.rst","mmlib4j/files/DataLoader.rst","mmlib4j/files/DataWriter.rst","mmlib4j/files/GroupByNumber.rst","mmlib4j/files/package-index.rst","mmlib4j/models/Models.rst","mmlib4j/models/datastruct/AbstractMatrix.rst","mmlib4j/models/datastruct/Algebra.rst","mmlib4j/models/datastruct/Float32.rst","mmlib4j/models/datastruct/Float64.rst","mmlib4j/models/datastruct/Matrix.rst","mmlib4j/models/datastruct/package-index.rst","mmlib4j/models/linear/Classifier.rst","mmlib4j/models/linear/ClassifierFloat32.rst","mmlib4j/models/linear/ClassifierFloat64.rst","mmlib4j/models/linear/LinearRegression.rst","mmlib4j/models/linear/LogisticRegression.rst","mmlib4j/models/linear/Regression.rst","mmlib4j/models/linear/RegressionFloat32.rst","mmlib4j/models/linear/RegressionFloat64.rst","mmlib4j/models/linear/package-index.rst","mmlib4j/models/neural_network/Layer.rst","mmlib4j/models/neural_network/MLP.rst","mmlib4j/models/neural_network/Network.rst","mmlib4j/models/neural_network/NetworkFloat32.rst","mmlib4j/models/neural_network/NetworkFloat64.rst","mmlib4j/models/neural_network/package-index.rst","mmlib4j/models/package-index.rst","mmlib4j/models/postprocessing/PostProcessing.rst","mmlib4j/models/postprocessing/PostProcessingBinary.rst","mmlib4j/models/postprocessing/PostProcessingIdentity.rst","mmlib4j/models/postprocessing/PostProcessingLinear.rst","mmlib4j/models/postprocessing/PostProcessingMulticlass.rst","mmlib4j/models/postprocessing/package-index.rst","mmlib4j/models/preprocessing/IdentityScaler.rst","mmlib4j/models/preprocessing/Mean.rst","mmlib4j/models/preprocessing/MinMax.rst","mmlib4j/models/preprocessing/Scaler.rst","mmlib4j/models/preprocessing/StandardDeviation.rst","mmlib4j/models/preprocessing/Zscore.rst","mmlib4j/models/preprocessing/package-index.rst","mmlib4j/models/svm/BinarySVC.rst","mmlib4j/models/svm/ClassifierSVC.rst","mmlib4j/models/svm/ClassifierSVCFloat32.rst","mmlib4j/models/svm/ClassifierSVCFloat64.rst","mmlib4j/models/svm/LinearClassifierSVC.rst","mmlib4j/models/svm/LinearClassifierSVCFloat32.rst","mmlib4j/models/svm/LinearClassifierSVCFloat64.rst","mmlib4j/models/svm/LinearSVC.rst","mmlib4j/models/svm/MulticlassSVC.rst","mmlib4j/models/svm/MulticlassStrategy.rst","mmlib4j/models/svm/OneVsOneFloat32.rst","mmlib4j/models/svm/OneVsOneFloat64.rst","mmlib4j/models/svm/SVC.rst","mmlib4j/models/svm/kernels/Kernel.rst","mmlib4j/models/svm/kernels/Linear.rst","mmlib4j/models/svm/kernels/Poly.rst","mmlib4j/models/svm/kernels/Rbf.rst","mmlib4j/models/svm/kernels/Sigmoid.rst","mmlib4j/models/svm/kernels/package-index.rst","mmlib4j/models/svm/package-index.rst","mmlib4j/models/svr/LinearRegressorSVR.rst","mmlib4j/models/svr/LinearRegressorSVRFloat32.rst","mmlib4j/models/svr/LinearRegressorSVRFloat64.rst","mmlib4j/models/svr/LinearSVR.rst","mmlib4j/models/svr/RegressorSVR.rst","mmlib4j/models/svr/RegressorSVRFloat32.rst","mmlib4j/models/svr/RegressorSVRFloat64.rst","mmlib4j/models/svr/SVR.rst","mmlib4j/models/svr/package-index.rst","mmlib4j/models/transfer/Identity.rst","mmlib4j/models/transfer/Logistic.rst","mmlib4j/models/transfer/Relu.rst","mmlib4j/models/transfer/Softmax.rst","mmlib4j/models/transfer/Tanh.rst","mmlib4j/models/transfer/Transfer.rst","mmlib4j/models/transfer/package-index.rst","mmlib4j/primitives/Primitives.rst","mmlib4j/primitives/package-index.rst","mmlib4j/targets/BoundBox.rst","mmlib4j/targets/BoundingBoxMatching.rst","mmlib4j/targets/ShapeMatching.rst","mmlib4j/targets/Target.rst","mmlib4j/targets/package-index.rst","mmlib4j/utils/Random.rst","mmlib4j/utils/package-index.rst","packages.rst"],objects:{"mmlib4j.debug":{Debug:[1,1,1,""],DebugNone:[2,1,1,""],DebugTask:[3,1,1,""],DebugTime:[4,1,1,""]},"mmlib4j.debug.Debug":{"end()":[1,2,1,""],"getInstance()":[1,2,1,""],"show(String)":[1,2,1,""],"start()":[1,2,1,""],instance:[1,3,1,""]},"mmlib4j.debug.DebugNone":{"end()":[2,2,1,""],"show(String)":[2,2,1,""],"start()":[2,2,1,""]},"mmlib4j.debug.DebugTask":{"end()":[3,2,1,""],"newInstance()":[3,2,1,""],"show(String)":[3,2,1,""],"start()":[3,2,1,""]},"mmlib4j.debug.DebugTime":{"end()":[4,2,1,""],"newInstance()":[4,2,1,""],"show(String)":[4,2,1,""],"start()":[4,2,1,""]},"mmlib4j.features":{ExtractFeatures:[6,1,1,""],Feature:[7,1,1,""],FeatureBody:[8,1,1,""],MeanVolumeFeatureR:[9,1,1,""],MserFeature:[10,1,1,""],NormalFeature:[11,1,1,""]},"mmlib4j.features.ExtractFeatures":{"ExtractFeatures(ConnectedFilteringByComponentTree, Target)":[6,4,1,""],"X()":[6,2,1,""],"Y()":[6,2,1,""],"featureExtractionOfAscendant(NodeLevelSets, Matrix, int)":[6,2,1,""],"featureExtractionOfDescendant(NodeLevelSets, Matrix, int)":[6,2,1,""],"find(int)":[6,2,1,""],"getAccumulatedAttributeInPath()":[6,2,1,""],"getAscendantsPaths()":[6,2,1,""],"getDescendantsPaths()":[6,2,1,""],"getNodesAscendantsPath(NodeLevelSets)":[6,2,1,""],"getTarget()":[6,2,1,""],"getTree()":[6,2,1,""],"header(String)":[6,2,1,""],"load()":[6,2,1,""],"maxAttributeDescendantsPath(NodeLevelSets, NodeLevelSets)":[6,2,1,""],"sample(NodeLevelSets)":[6,2,1,""],"samples()":[6,2,1,""],"save(String, String)":[6,2,1,""],"setAccumulatedAttributeInPath(int)":[6,2,1,""],"setAscendantsPaths(ArrayList[])":[6,2,1,""],"setDescendantsPaths(ArrayList[])":[6,2,1,""],"setTarget(Target)":[6,2,1,""],"setTree(ConnectedFilteringByComponentTree)":[6,2,1,""],"write(DataWriter, boolean)":[6,2,1,""],"x(NodeLevelSets)":[6,2,1,""],"y(NodeLevelSets)":[6,2,1,""],attr:[6,3,1,""],nodesNr:[6,3,1,""]},"mmlib4j.features.Feature":{"getFeatureId()":[7,2,1,""],"getFeatureName()":[7,2,1,""],"getImgRGB()":[7,2,1,""],"loadFeature(ConnectedFilteringByComponentTree)":[7,2,1,""],"setImgRGB(ColorImage)":[7,2,1,""]},"mmlib4j.features.FeatureBody":{"getFeatureId()":[8,2,1,""],"getFeatureName()":[8,2,1,""],"getImgRGB()":[8,2,1,""],"setImgRGB(ColorImage)":[8,2,1,""],featureId:[8,3,1,""],featureName:[8,3,1,""],imgRGB:[8,3,1,""]},"mmlib4j.features.MeanVolumeFeatureR":{"MeanVolumeFeatureR(String, int)":[9,4,1,""],"addAttributeInNodes(NodeLevelSets)":[9,2,1,""],"addAttributeInNodesCT(HashSet)":[9,2,1,""],"loadFeature(ConnectedFilteringByComponentTree)":[9,2,1,""]},"mmlib4j.features.MserFeature":{"MserFeature(int, String, int)":[10,4,1,""],"MserFeature(int, double, int, int, boolean, int, String, int)":[10,4,1,""],"loadFeature(ConnectedFilteringByComponentTree)":[10,2,1,""]},"mmlib4j.features.NormalFeature":{"NormalFeature(String, int)":[11,4,1,""],"loadFeature(ConnectedFilteringByComponentTree)":[11,2,1,""]},"mmlib4j.files":{DataFile:[13,1,1,""],DataGroup:[14,1,1,""],DataLoader:[15,1,1,""],DataWriter:[16,1,1,""],GroupByNumber:[17,1,1,""]},"mmlib4j.files.DataFile":{"DataFile(String, String, List)":[13,4,1,""],"filter(String)":[13,2,1,""],"getDataName()":[13,2,1,""],"getFiles()":[13,2,1,""],"output()":[13,2,1,""],"prefix(String)":[13,2,1,""],"setDataName(String)":[13,2,1,""],"setFiles(List)":[13,2,1,""]},"mmlib4j.files.DataGroup":{"isgroup(File)":[14,2,1,""]},"mmlib4j.files.DataLoader":{"DataLoader(String, String, String[])":[15,4,1,""],"DataLoader(String, String[])":[15,4,1,""],"DataLoader(String[])":[15,4,1,""],"dir()":[15,2,1,""],"getListOfFiles()":[15,2,1,""],"isValidExtension(String)":[15,2,1,""],"load(File)":[15,2,1,""],"setListOfFiles(List)":[15,2,1,""]},"mmlib4j.files.DataWriter":{"close()":[16,2,1,""],"create(String)":[16,2,1,""],"getExtension()":[16,2,1,""],"getSeparator()":[16,2,1,""],"setExtension(String)":[16,2,1,""],"setSeparator(String)":[16,2,1,""],"write(Matrix)":[16,2,1,""],"write(String)":[16,2,1,""]},"mmlib4j.files.GroupByNumber":{"isgroup(File)":[17,2,1,""]},"mmlib4j.models":{Models:[19,1,1,""],datastruct:[25,0,1,""],linear:[34,0,1,""],neural_network:[40,0,1,""],postprocessing:[47,0,1,""],preprocessing:[54,0,1,""],svm:[74,0,1,""],svr:[83,0,1,""],transfer:[90,0,1,""]},"mmlib4j.models.Models":{"Models()":[19,4,1,""],"Models(Class)":[19,4,1,""],"Models(Class, JsonObject)":[19,4,1,""],"Models(Class, String)":[19,4,1,""],"Models(JsonObject)":[19,4,1,""],"Models(String)":[19,4,1,""],"load(JsonObject)":[19,2,1,""],"load(String)":[19,2,1,""],"predict(Matrix)":[19,2,1,""],"predict(N)":[19,2,1,""]},"mmlib4j.models.datastruct":{AbstractMatrix:[20,1,1,""],Algebra:[21,1,1,""],Float32:[22,1,1,""],Float64:[23,1,1,""],Matrix:[24,1,1,""]},"mmlib4j.models.datastruct.AbstractMatrix":{"T(Matrix)":[20,2,1,""],"T(Matrix, Matrix)":[20,2,1,""],"Tdot(Matrix, Matrix)":[20,2,1,""],"Tdot(Matrix, Matrix, Matrix)":[20,2,1,""],"Tdot(Matrix, Number, Matrix)":[20,2,1,""],"Tdot(Matrix, Number, Matrix, Matrix)":[20,2,1,""],"TdotT(Matrix, Matrix)":[20,2,1,""],"TdotT(Matrix, Matrix, Matrix)":[20,2,1,""],"TdotT(Matrix, Number, Matrix)":[20,2,1,""],"TdotT(Matrix, Number, Matrix, Matrix)":[20,2,1,""],"argmax(Matrix, int)":[20,2,1,""],"argmin(Matrix, int)":[20,2,1,""],"biggerthen(Matrix, Number)":[20,2,1,""],"biggerthen(Matrix, Number, Matrix)":[20,2,1,""],"biggertheni(Matrix, Number)":[20,2,1,""],"clone(N)":[20,2,1,""],"column(Matrix, int)":[20,2,1,""],"column(Matrix, int, Matrix)":[20,2,1,""],"copy(Matrix)":[20,2,1,""],"create(int, int)":[20,2,1,""],"div(Matrix, Matrix)":[20,2,1,""],"div(Matrix, Matrix, Matrix)":[20,2,1,""],"div(Matrix, Number)":[20,2,1,""],"div(Matrix, Number, Matrix)":[20,2,1,""],"divi(Matrix, Matrix)":[20,2,1,""],"divi(Matrix, Number)":[20,2,1,""],"dot(Matrix, Matrix)":[20,2,1,""],"dot(Matrix, Matrix, Matrix)":[20,2,1,""],"dot(Matrix, Number, Matrix)":[20,2,1,""],"dot(Matrix, Number, Matrix, Matrix)":[20,2,1,""],"dotT(Matrix, Matrix)":[20,2,1,""],"dotT(Matrix, Matrix, Matrix)":[20,2,1,""],"dotT(Matrix, Number, Matrix)":[20,2,1,""],"dotT(Matrix, Number, Matrix, Matrix)":[20,2,1,""],"exp(Matrix)":[20,2,1,""],"exp(Matrix, Matrix)":[20,2,1,""],"expi(Matrix)":[20,2,1,""],"fill(Matrix, Number)":[20,2,1,""],"getIndex(int, int, int)":[20,2,1,""],"head(Matrix)":[20,2,1,""],"head(Matrix, int, int)":[20,2,1,""],"head(Matrix, int, int, String)":[20,2,1,""],"length(N)":[20,2,1,""],"lessthen(Matrix, Number)":[20,2,1,""],"lessthen(Matrix, Number, Matrix)":[20,2,1,""],"lesstheni(Matrix, Number)":[20,2,1,""],"max(Matrix)":[20,2,1,""],"max(Matrix, Number, Matrix)":[20,2,1,""],"max(Matrix, int)":[20,2,1,""],"maxi(Matrix, Number)":[20,2,1,""],"mean(Matrix)":[20,2,1,""],"mean(Matrix, int)":[20,2,1,""],"mean(Matrix, int, Matrix)":[20,2,1,""],"mean(Matrix, int, int, Number, Matrix)":[20,2,1,""],"meann(Matrix)":[20,2,1,""],"meann(Matrix, int)":[20,2,1,""],"min(Matrix)":[20,2,1,""],"min(Matrix, Number, Matrix)":[20,2,1,""],"min(Matrix, int)":[20,2,1,""],"minus(Matrix, Matrix)":[20,2,1,""],"minus(Matrix, Matrix, Matrix)":[20,2,1,""],"minus(Matrix, Number)":[20,2,1,""],"minus(Matrix, Number, Matrix)":[20,2,1,""],"minusi(Matrix, Matrix)":[20,2,1,""],"minusi(Matrix, Number)":[20,2,1,""],"minusn(Matrix, Matrix)":[20,2,1,""],"minusni(Matrix, Matrix)":[20,2,1,""],"mul(Matrix, Matrix)":[20,2,1,""],"mul(Matrix, Matrix, Matrix)":[20,2,1,""],"mul(Matrix, Number)":[20,2,1,""],"mul(Matrix, Number, Matrix)":[20,2,1,""],"muli(Matrix, Matrix)":[20,2,1,""],"muli(Matrix, Number)":[20,2,1,""],"neg(Matrix)":[20,2,1,""],"neg(Matrix, Matrix)":[20,2,1,""],"negi(Matrix)":[20,2,1,""],"one(Matrix)":[20,2,1,""],"plus(Matrix, Matrix)":[20,2,1,""],"plus(Matrix, Matrix, Matrix)":[20,2,1,""],"plus(Matrix, Number)":[20,2,1,""],"plus(Matrix, Number, Matrix)":[20,2,1,""],"plusi(Matrix, Matrix)":[20,2,1,""],"plusi(Matrix, Number)":[20,2,1,""],"plusn(Matrix, Matrix)":[20,2,1,""],"plusni(Matrix, Matrix)":[20,2,1,""],"pow(Matrix, Number)":[20,2,1,""],"pow(Matrix, Number, Matrix)":[20,2,1,""],"pow2(Matrix)":[20,2,1,""],"pow2(Matrix, Matrix)":[20,2,1,""],"pow2i(Matrix)":[20,2,1,""],"powi(Matrix, Number)":[20,2,1,""],"print(Matrix)":[20,2,1,""],"rand(Matrix)":[20,2,1,""],"randn(Matrix)":[20,2,1,""],"rdiv(Matrix, Number)":[20,2,1,""],"rdiv(Matrix, Number, Matrix)":[20,2,1,""],"rdivi(Matrix, Number)":[20,2,1,""],"row(Matrix, int)":[20,2,1,""],"row(Matrix, int, Matrix)":[20,2,1,""],"set(Matrix, int, int, Number)":[20,2,1,""],"sigmoid(Matrix, Matrix)":[20,2,1,""],"sigmoidi(Matrix)":[20,2,1,""],"sqrt(Matrix)":[20,2,1,""],"sqrt(Matrix, Matrix)":[20,2,1,""],"sqrti(Matrix)":[20,2,1,""],"std(Matrix, int, int)":[20,2,1,""],"std(Matrix, int, int, Matrix)":[20,2,1,""],"std(Matrix, int, int, int, Matrix)":[20,2,1,""],"stdn(Matrix, int, int)":[20,2,1,""],"stdn(Matrix, int, int, int, Matrix)":[20,2,1,""],"sum(Matrix)":[20,2,1,""],"sum(Matrix, int)":[20,2,1,""],"sum(Matrix, int, Matrix)":[20,2,1,""],"sum(Matrix, int, int, Matrix)":[20,2,1,""],"sumn(Matrix)":[20,2,1,""],"sumn(Matrix, int)":[20,2,1,""],"sumn(Matrix, int, Matrix)":[20,2,1,""],"sumn(Matrix, int, Matrix, Matrix)":[20,2,1,""],"tanh(Matrix)":[20,2,1,""],"tanh(Matrix, Matrix)":[20,2,1,""],"tanhi(Matrix)":[20,2,1,""],"threshold(Matrix, Number)":[20,2,1,""],"threshold(Matrix, Number, Matrix)":[20,2,1,""],"thresholdi(Matrix, Number)":[20,2,1,""],"toString(Matrix, String)":[20,2,1,""],"type()":[20,2,1,""],"var(Matrix, int, int)":[20,2,1,""],"var(Matrix, int, int, int, Matrix)":[20,2,1,""],"varn(Matrix, int, int)":[20,2,1,""],"varn(Matrix, int, int, int, Matrix)":[20,2,1,""],"zero(Matrix)":[20,2,1,""]},"mmlib4j.models.datastruct.Algebra":{"dminus(int, Matrix, Matrix)":[21,2,1,""],"dplus(int, Matrix, Matrix)":[21,2,1,""],"fminus(int, Matrix, Matrix)":[21,2,1,""],"fplus(int, Matrix, Matrix)":[21,2,1,""],"multAdd(double, Matrix, Matrix, Matrix)":[21,2,1,""],"multAdd(float, Matrix, Matrix, Matrix)":[21,2,1,""],"transABmultAdd(double, Matrix, Matrix, Matrix)":[21,2,1,""],"transABmultAdd(float, Matrix, Matrix, Matrix)":[21,2,1,""],"transAmultAdd(double, Matrix, Matrix, Matrix)":[21,2,1,""],"transAmultAdd(float, Matrix, Matrix, Matrix)":[21,2,1,""],"transBmultAdd(double, Matrix, Matrix, Matrix)":[21,2,1,""],"transBmultAdd(float, Matrix, Matrix, Matrix)":[21,2,1,""]},"mmlib4j.models.datastruct.Float32":{"T(Matrix, Matrix)":[22,2,1,""],"Tdot(Matrix, Matrix)":[22,2,1,""],"Tdot(Matrix, Number, Matrix)":[22,2,1,""],"Tdot(Matrix, Number, Matrix, Matrix)":[22,2,1,""],"TdotT(Matrix, Matrix)":[22,2,1,""],"TdotT(Matrix, Number, Matrix)":[22,2,1,""],"TdotT(Matrix, Number, Matrix, Matrix)":[22,2,1,""],"argmax(Matrix, int)":[22,2,1,""],"argmin(Matrix, int)":[22,2,1,""],"biggerthen(Matrix, Number, Matrix)":[22,2,1,""],"clone(float[])":[22,2,1,""],"colargmax(Matrix, int, int, Matrix)":[22,2,1,""],"colargmin(Matrix, int, int, Matrix)":[22,2,1,""],"column(Matrix, int, Matrix)":[22,2,1,""],"create(int, int)":[22,2,1,""],"div(Matrix, Matrix)":[22,2,1,""],"div(Matrix, Matrix, Matrix)":[22,2,1,""],"div(Matrix, Number, Matrix)":[22,2,1,""],"divi(Matrix, Matrix)":[22,2,1,""],"dot(Matrix, Matrix)":[22,2,1,""],"dot(Matrix, Number, Matrix)":[22,2,1,""],"dot(Matrix, Number, Matrix, Matrix)":[22,2,1,""],"dotT(Matrix, Matrix)":[22,2,1,""],"dotT(Matrix, Number, Matrix)":[22,2,1,""],"dotT(Matrix, Number, Matrix, Matrix)":[22,2,1,""],"exp(Matrix, Matrix)":[22,2,1,""],"fill(Matrix, Number)":[22,2,1,""],"head(Matrix, int, int, String)":[22,2,1,""],"length(float[])":[22,2,1,""],"lessthen(Matrix, Number, Matrix)":[22,2,1,""],"max(Matrix)":[22,2,1,""],"max(Matrix, Number, Matrix)":[22,2,1,""],"max(Matrix, int)":[22,2,1,""],"max(Matrix, int, int, Matrix)":[22,2,1,""],"meann(Matrix)":[22,2,1,""],"min(Matrix)":[22,2,1,""],"min(Matrix, Number, Matrix)":[22,2,1,""],"min(Matrix, int)":[22,2,1,""],"min(Matrix, int, int, Matrix)":[22,2,1,""],"minus(Matrix, Matrix)":[22,2,1,""],"minus(Matrix, Matrix, Matrix)":[22,2,1,""],"minus(Matrix, Number, Matrix)":[22,2,1,""],"minusi(Matrix, Matrix)":[22,2,1,""],"minusn(Matrix, Matrix)":[22,2,1,""],"minusni(Matrix, Matrix)":[22,2,1,""],"mul(Matrix, Matrix)":[22,2,1,""],"mul(Matrix, Matrix, Matrix)":[22,2,1,""],"mul(Matrix, Number, Matrix)":[22,2,1,""],"muli(Matrix, Matrix)":[22,2,1,""],"neg(Matrix, Matrix)":[22,2,1,""],"plus(Matrix, Matrix)":[22,2,1,""],"plus(Matrix, Matrix, Matrix)":[22,2,1,""],"plus(Matrix, Number, Matrix)":[22,2,1,""],"plusi(Matrix, Matrix)":[22,2,1,""],"plusn(Matrix, Matrix)":[22,2,1,""],"plusni(Matrix, Matrix)":[22,2,1,""],"pow(Matrix, Number, Matrix)":[22,2,1,""],"pow2(Matrix, Matrix)":[22,2,1,""],"print(Matrix)":[22,2,1,""],"rand(Matrix)":[22,2,1,""],"randn(Matrix)":[22,2,1,""],"rdiv(Matrix, Number, Matrix)":[22,2,1,""],"row(Matrix, int, Matrix)":[22,2,1,""],"rowargmax(Matrix, int, int, Matrix)":[22,2,1,""],"rowargmin(Matrix, int, int, Matrix)":[22,2,1,""],"set(Matrix, int, int, Number)":[22,2,1,""],"sigmoid(Matrix, Matrix)":[22,2,1,""],"sqrt(Matrix, Matrix)":[22,2,1,""],"sum(Matrix, int, int, Matrix)":[22,2,1,""],"sumn(Matrix)":[22,2,1,""],"sumn(Matrix, int)":[22,2,1,""],"sumn(Matrix, int, Matrix)":[22,2,1,""],"sumn(Matrix, int, Matrix, Matrix)":[22,2,1,""],"tanh(Matrix, Matrix)":[22,2,1,""],"toString(Matrix, String)":[22,2,1,""],"type()":[22,2,1,""],instance:[22,3,1,""]},"mmlib4j.models.datastruct.Float64":{"T(Matrix, Matrix)":[23,2,1,""],"Tdot(Matrix, Matrix)":[23,2,1,""],"Tdot(Matrix, Number, Matrix)":[23,2,1,""],"Tdot(Matrix, Number, Matrix, Matrix)":[23,2,1,""],"TdotT(Matrix, Matrix)":[23,2,1,""],"TdotT(Matrix, Number, Matrix)":[23,2,1,""],"TdotT(Matrix, Number, Matrix, Matrix)":[23,2,1,""],"argmax(Matrix, int)":[23,2,1,""],"argmin(Matrix, int)":[23,2,1,""],"biggerthen(Matrix, Number, Matrix)":[23,2,1,""],"clone(double[])":[23,2,1,""],"colargmax(Matrix, int, int, Matrix)":[23,2,1,""],"colargmin(Matrix, int, int, Matrix)":[23,2,1,""],"column(Matrix, int, Matrix)":[23,2,1,""],"create(int, int)":[23,2,1,""],"div(Matrix, Matrix)":[23,2,1,""],"div(Matrix, Matrix, Matrix)":[23,2,1,""],"div(Matrix, Number, Matrix)":[23,2,1,""],"divi(Matrix, Matrix)":[23,2,1,""],"dot(Matrix, Matrix)":[23,2,1,""],"dot(Matrix, Number, Matrix)":[23,2,1,""],"dot(Matrix, Number, Matrix, Matrix)":[23,2,1,""],"dotT(Matrix, Matrix)":[23,2,1,""],"dotT(Matrix, Number, Matrix)":[23,2,1,""],"dotT(Matrix, Number, Matrix, Matrix)":[23,2,1,""],"exp(Matrix, Matrix)":[23,2,1,""],"fill(Matrix, Number)":[23,2,1,""],"head(Matrix, int, int, String)":[23,2,1,""],"length(double[])":[23,2,1,""],"lessthen(Matrix, Number, Matrix)":[23,2,1,""],"max(Matrix)":[23,2,1,""],"max(Matrix, Number, Matrix)":[23,2,1,""],"max(Matrix, int)":[23,2,1,""],"max(Matrix, int, int, Matrix)":[23,2,1,""],"meann(Matrix)":[23,2,1,""],"min(Matrix)":[23,2,1,""],"min(Matrix, Number, Matrix)":[23,2,1,""],"min(Matrix, int)":[23,2,1,""],"min(Matrix, int, int, Matrix)":[23,2,1,""],"minus(Matrix, Matrix)":[23,2,1,""],"minus(Matrix, Matrix, Matrix)":[23,2,1,""],"minus(Matrix, Number, Matrix)":[23,2,1,""],"minusi(Matrix, Matrix)":[23,2,1,""],"minusn(Matrix, Matrix)":[23,2,1,""],"minusni(Matrix, Matrix)":[23,2,1,""],"mul(Matrix, Matrix)":[23,2,1,""],"mul(Matrix, Matrix, Matrix)":[23,2,1,""],"mul(Matrix, Number, Matrix)":[23,2,1,""],"muli(Matrix, Matrix)":[23,2,1,""],"neg(Matrix, Matrix)":[23,2,1,""],"plus(Matrix, Matrix)":[23,2,1,""],"plus(Matrix, Matrix, Matrix)":[23,2,1,""],"plus(Matrix, Number, Matrix)":[23,2,1,""],"plusi(Matrix, Matrix)":[23,2,1,""],"plusn(Matrix, Matrix)":[23,2,1,""],"plusni(Matrix, Matrix)":[23,2,1,""],"pow(Matrix, Number, Matrix)":[23,2,1,""],"pow2(Matrix, Matrix)":[23,2,1,""],"print(Matrix)":[23,2,1,""],"rand(Matrix)":[23,2,1,""],"randn(Matrix)":[23,2,1,""],"rdiv(Matrix, Number, Matrix)":[23,2,1,""],"row(Matrix, int, Matrix)":[23,2,1,""],"rowargmax(Matrix, int, int, Matrix)":[23,2,1,""],"rowargmin(Matrix, int, int, Matrix)":[23,2,1,""],"set(Matrix, int, int, Number)":[23,2,1,""],"sigmoid(Matrix, Matrix)":[23,2,1,""],"sqrt(Matrix, Matrix)":[23,2,1,""],"sum(Matrix, int, int, Matrix)":[23,2,1,""],"sumn(Matrix)":[23,2,1,""],"sumn(Matrix, int)":[23,2,1,""],"sumn(Matrix, int, Matrix)":[23,2,1,""],"sumn(Matrix, int, Matrix, Matrix)":[23,2,1,""],"tanh(Matrix, Matrix)":[23,2,1,""],"toString(Matrix, String)":[23,2,1,""],"type()":[23,2,1,""],instance:[23,3,1,""]},"mmlib4j.models.datastruct.Matrix":{"Matrix(AbstractMatrix, int, int)":[24,4,1,""],"Matrix(AbstractMatrix, int, int, N)":[24,4,1,""],"Matrix(Class, N, boolean)":[24,4,1,""],"Matrix(Class, int, int)":[24,4,1,""],"Matrix(Class, int, int, N, boolean)":[24,4,1,""],"Matrix(Matrix, boolean)":[24,4,1,""],"Matrix(double[], int, int)":[24,4,1,""],"Matrix(double[][])":[24,4,1,""],"Matrix(float[], int, int)":[24,4,1,""],"Matrix(float[][])":[24,4,1,""],"Matrix(int, int, double[], boolean)":[24,4,1,""],"Matrix(int, int, float[], boolean)":[24,4,1,""],"T()":[24,2,1,""],"T(Matrix)":[24,2,1,""],"Tdot(Matrix)":[24,2,1,""],"Tdot(Matrix, Matrix)":[24,2,1,""],"Tdot(Number, Matrix)":[24,2,1,""],"Tdot(Number, Matrix, Matrix)":[24,2,1,""],"TdotT(Matrix)":[24,2,1,""],"TdotT(Matrix, Matrix)":[24,2,1,""],"TdotT(Number, Matrix)":[24,2,1,""],"TdotT(Number, Matrix, Matrix)":[24,2,1,""],"argmax(int)":[24,2,1,""],"argmin(int)":[24,2,1,""],"biggerthen(Number)":[24,2,1,""],"biggerthen(Number, Matrix)":[24,2,1,""],"biggertheni(Number)":[24,2,1,""],"column(int)":[24,2,1,""],"column(int, Matrix)":[24,2,1,""],"copy()":[24,2,1,""],"div(Matrix)":[24,2,1,""],"div(Matrix, Matrix)":[24,2,1,""],"div(Number)":[24,2,1,""],"div(Number, Matrix)":[24,2,1,""],"divi(Matrix)":[24,2,1,""],"divi(Number)":[24,2,1,""],"dot(Matrix)":[24,2,1,""],"dot(Matrix, Matrix)":[24,2,1,""],"dot(Number, Matrix)":[24,2,1,""],"dot(Number, Matrix, Matrix)":[24,2,1,""],"dotT(Matrix)":[24,2,1,""],"dotT(Matrix, Matrix)":[24,2,1,""],"dotT(Number, Matrix)":[24,2,1,""],"dotT(Number, Matrix, Matrix)":[24,2,1,""],"exp()":[24,2,1,""],"exp(Matrix)":[24,2,1,""],"expi()":[24,2,1,""],"fill(Number)":[24,2,1,""],"getData()":[24,2,1,""],"getSeparator()":[24,2,1,""],"head(Matrix)":[24,2,1,""],"head(int, int)":[24,2,1,""],"head(int, int, String)":[24,2,1,""],"isScalar()":[24,2,1,""],"length()":[24,2,1,""],"lessthen(Number)":[24,2,1,""],"lessthen(Number, Matrix)":[24,2,1,""],"lesstheni(Number)":[24,2,1,""],"matrix()":[24,2,1,""],"max()":[24,2,1,""],"max(Number, Matrix)":[24,2,1,""],"max(int)":[24,2,1,""],"maxi(Number)":[24,2,1,""],"mean()":[24,2,1,""],"mean(int)":[24,2,1,""],"mean(int, Matrix)":[24,2,1,""],"meann()":[24,2,1,""],"meann(int)":[24,2,1,""],"min()":[24,2,1,""],"min(Number, Matrix)":[24,2,1,""],"min(int)":[24,2,1,""],"minus(Matrix)":[24,2,1,""],"minus(Matrix, Matrix)":[24,2,1,""],"minus(Number)":[24,2,1,""],"minus(Number, Matrix)":[24,2,1,""],"minusi(Matrix)":[24,2,1,""],"minusi(Number)":[24,2,1,""],"minusn(Matrix)":[24,2,1,""],"minusni(Matrix)":[24,2,1,""],"mul(Matrix)":[24,2,1,""],"mul(Matrix, Matrix)":[24,2,1,""],"mul(Number)":[24,2,1,""],"mul(Number, Matrix)":[24,2,1,""],"muli(Matrix)":[24,2,1,""],"muli(Number)":[24,2,1,""],"neg()":[24,2,1,""],"neg(Matrix)":[24,2,1,""],"negi()":[24,2,1,""],"numColumns()":[24,2,1,""],"numColumns(int)":[24,2,1,""],"numRows()":[24,2,1,""],"numRows(int)":[24,2,1,""],"one()":[24,2,1,""],"ones(Class, int, int)":[24,2,1,""],"plus(Matrix)":[24,2,1,""],"plus(Matrix, Matrix)":[24,2,1,""],"plus(Number)":[24,2,1,""],"plus(Number, Matrix)":[24,2,1,""],"plusi(Matrix)":[24,2,1,""],"plusi(Number)":[24,2,1,""],"plusn(Matrix)":[24,2,1,""],"plusni(Matrix)":[24,2,1,""],"pow(Number)":[24,2,1,""],"pow(Number, Matrix)":[24,2,1,""],"pow2()":[24,2,1,""],"pow2(Matrix)":[24,2,1,""],"pow2i()":[24,2,1,""],"powi(Number)":[24,2,1,""],"print()":[24,2,1,""],"rand()":[24,2,1,""],"rand(Class, int, int)":[24,2,1,""],"randn()":[24,2,1,""],"randn(Class, int, int)":[24,2,1,""],"rdiv(Number)":[24,2,1,""],"rdiv(Number, Matrix)":[24,2,1,""],"rdivi(Number)":[24,2,1,""],"row(int)":[24,2,1,""],"row(int, Matrix)":[24,2,1,""],"set(int, int, Number)":[24,2,1,""],"setData(N)":[24,2,1,""],"setSeparator(String)":[24,2,1,""],"shape()":[24,2,1,""],"sigmoid(Matrix)":[24,2,1,""],"sigmoidi()":[24,2,1,""],"sqrt()":[24,2,1,""],"sqrt(Matrix)":[24,2,1,""],"sqrti()":[24,2,1,""],"std(int, int)":[24,2,1,""],"std(int, int, Matrix)":[24,2,1,""],"stdn(int, int)":[24,2,1,""],"sum()":[24,2,1,""],"sum(int)":[24,2,1,""],"sum(int, Matrix)":[24,2,1,""],"sumn()":[24,2,1,""],"sumn(int)":[24,2,1,""],"sumn(int, Matrix)":[24,2,1,""],"sumn(int, Matrix, Matrix)":[24,2,1,""],"tanh()":[24,2,1,""],"tanh(Matrix)":[24,2,1,""],"tanhi()":[24,2,1,""],"threshold(Number)":[24,2,1,""],"threshold(Number, Matrix)":[24,2,1,""],"thresholdi(Number)":[24,2,1,""],"toString()":[24,2,1,""],"type()":[24,2,1,""],"var(int, int)":[24,2,1,""],"varn(int, int)":[24,2,1,""],"zero()":[24,2,1,""],"zeros(Class, int, int)":[24,2,1,""]},"mmlib4j.models.linear":{Classifier:[26,1,1,""],ClassifierFloat32:[27,1,1,""],ClassifierFloat64:[28,1,1,""],LinearRegression:[29,1,1,""],LogisticRegression:[30,1,1,""],Regression:[31,1,1,""],RegressionFloat32:[32,1,1,""],RegressionFloat64:[33,1,1,""]},"mmlib4j.models.linear.Classifier":{"coefficients()":[26,2,1,""],"intercept()":[26,2,1,""],"interceptsLength()":[26,2,1,""],"numColumns()":[26,2,1,""],"numRows()":[26,2,1,""]},"mmlib4j.models.linear.ClassifierFloat32":{"coefficients()":[27,2,1,""],"intercept()":[27,2,1,""],"interceptsLength()":[27,2,1,""],"numColumns()":[27,2,1,""],"numRows()":[27,2,1,""],coefficients:[27,3,1,""],intercept:[27,3,1,""],numColumns:[27,3,1,""],numRows:[27,3,1,""]},"mmlib4j.models.linear.ClassifierFloat64":{"coefficients()":[28,2,1,""],"intercept()":[28,2,1,""],"interceptsLength()":[28,2,1,""],"numColumns()":[28,2,1,""],"numRows()":[28,2,1,""],coefficients:[28,3,1,""],intercept:[28,3,1,""],numColumns:[28,3,1,""],numRows:[28,3,1,""]},"mmlib4j.models.linear.LinearRegression":{"LinearRegression(Class)":[29,4,1,""],"LinearRegression(Class, JsonObject)":[29,4,1,""],"LinearRegression(Class, String)":[29,4,1,""],"LinearRegression(JsonObject)":[29,4,1,""],"LinearRegression(String)":[29,4,1,""],"load(JsonObject)":[29,2,1,""],"load(String)":[29,2,1,""],"predict(Matrix)":[29,2,1,""],"predict(N)":[29,2,1,""]},"mmlib4j.models.linear.LogisticRegression":{"LogisticRegression(Class)":[30,4,1,""],"LogisticRegression(Class, JsonObject)":[30,4,1,""],"LogisticRegression(Class, String)":[30,4,1,""],"LogisticRegression(JsonObject)":[30,4,1,""],"LogisticRegression(String)":[30,4,1,""],"load(JsonObject)":[30,2,1,""],"load(String)":[30,2,1,""],"predict(Matrix)":[30,2,1,""],"predict(N)":[30,2,1,""],"probability(Matrix)":[30,2,1,""]},"mmlib4j.models.linear.Regression":{"coefficients()":[31,2,1,""],"coefficientsLength()":[31,2,1,""],"intercept()":[31,2,1,""],"type()":[31,2,1,""]},"mmlib4j.models.linear.RegressionFloat32":{"coefficients()":[32,2,1,""],"coefficientsLength()":[32,2,1,""],"intercept()":[32,2,1,""],"type()":[32,2,1,""],coefficients:[32,3,1,""],intercept:[32,3,1,""]},"mmlib4j.models.linear.RegressionFloat64":{"coefficients()":[33,2,1,""],"coefficientsLength()":[33,2,1,""],"intercept()":[33,2,1,""],"type()":[33,2,1,""],coefficients:[33,3,1,""],intercept:[33,3,1,""]},"mmlib4j.models.neural_network":{Layer:[35,1,1,""],MLP:[36,1,1,""],Network:[37,1,1,""],NetworkFloat32:[38,1,1,""],NetworkFloat64:[39,1,1,""]},"mmlib4j.models.neural_network.Layer":{"Layer(Transfer)":[35,4,1,""],"Layer(Transfer, Matrix, Matrix)":[35,4,1,""],"activate(Matrix)":[35,2,1,""],"getBias()":[35,2,1,""],"getTransfer()":[35,2,1,""],"getWeigths()":[35,2,1,""],"setBias(Matrix)":[35,2,1,""],"setTransfer(Transfer)":[35,2,1,""],"setWeigths(Matrix)":[35,2,1,""]},"mmlib4j.models.neural_network.MLP":{"MLP(Class)":[36,4,1,""],"MLP(Class, JsonObject)":[36,4,1,""],"MLP(Class, String)":[36,4,1,""],"MLP(JsonObject)":[36,4,1,""],"MLP(String)":[36,4,1,""],"load(JsonObject)":[36,2,1,""],"load(String)":[36,2,1,""],"predict(Matrix)":[36,2,1,""],"predict(N)":[36,2,1,""]},"mmlib4j.models.neural_network.Network":{"bias()":[37,2,1,""],"biasLength(int)":[37,2,1,""],"hidden_activation()":[37,2,1,""],"numColumns(int)":[37,2,1,""],"numRows(int)":[37,2,1,""],"output_activation()":[37,2,1,""],"weights()":[37,2,1,""]},"mmlib4j.models.neural_network.NetworkFloat32":{"bias()":[38,2,1,""],"biasLength(int)":[38,2,1,""],"hidden_activation()":[38,2,1,""],"numColumns(int)":[38,2,1,""],"numRows(int)":[38,2,1,""],"output_activation()":[38,2,1,""],"weights()":[38,2,1,""]},"mmlib4j.models.neural_network.NetworkFloat64":{"bias()":[39,2,1,""],"biasLength(int)":[39,2,1,""],"hidden_activation()":[39,2,1,""],"numColumns(int)":[39,2,1,""],"numRows(int)":[39,2,1,""],"output_activation()":[39,2,1,""],"weights()":[39,2,1,""]},"mmlib4j.models.postprocessing":{PostProcessing:[42,1,1,""],PostProcessingBinary:[43,1,1,""],PostProcessingIdentity:[44,1,1,""],PostProcessingLinear:[45,1,1,""],PostProcessingMulticlass:[46,1,1,""]},"mmlib4j.models.postprocessing.PostProcessing":{"execute(Matrix)":[42,2,1,""]},"mmlib4j.models.postprocessing.PostProcessingBinary":{"execute(Matrix)":[43,2,1,""]},"mmlib4j.models.postprocessing.PostProcessingIdentity":{"execute(Matrix)":[44,2,1,""]},"mmlib4j.models.postprocessing.PostProcessingLinear":{"execute(Matrix)":[45,2,1,""]},"mmlib4j.models.postprocessing.PostProcessingMulticlass":{"execute(Matrix)":[46,2,1,""]},"mmlib4j.models.preprocessing":{IdentityScaler:[48,1,1,""],Mean:[49,1,1,""],MinMax:[50,1,1,""],Scaler:[51,1,1,""],StandardDeviation:[52,1,1,""],Zscore:[53,1,1,""]},"mmlib4j.models.preprocessing.IdentityScaler":{"normalize(Matrix)":[48,2,1,""]},"mmlib4j.models.preprocessing.Mean":{"Mean()":[49,4,1,""],"Mean(Class, JsonObject)":[49,4,1,""],"Mean(Class, String)":[49,4,1,""],"Mean(Matrix)":[49,4,1,""],"load(JsonObject)":[49,2,1,""],"load(String)":[49,2,1,""],"normalize(Matrix)":[49,2,1,""]},"mmlib4j.models.preprocessing.MinMax":{"MinMax()":[50,4,1,""],"MinMax(Class, JsonObject)":[50,4,1,""],"MinMax(Class, String)":[50,4,1,""],"MinMax(Matrix, Matrix)":[50,4,1,""],"load(JsonObject)":[50,2,1,""],"load(String)":[50,2,1,""],"normalize(Matrix)":[50,2,1,""]},"mmlib4j.models.preprocessing.Scaler":{"Scaler()":[51,4,1,""],"Scaler(Class, JsonObject)":[51,4,1,""],"Scaler(Class, String)":[51,4,1,""],"load(JsonObject)":[51,2,1,""],"load(String)":[51,2,1,""],"normalize(Matrix)":[51,2,1,""]},"mmlib4j.models.preprocessing.StandardDeviation":{"StandardDeviation()":[52,4,1,""],"StandardDeviation(Class, JsonObject)":[52,4,1,""],"StandardDeviation(Class, String)":[52,4,1,""],"StandardDeviation(Matrix)":[52,4,1,""],"load(JsonObject)":[52,2,1,""],"load(String)":[52,2,1,""],"normalize(Matrix)":[52,2,1,""]},"mmlib4j.models.preprocessing.Zscore":{"Zscore()":[53,4,1,""],"Zscore(Class, JsonObject)":[53,4,1,""],"Zscore(Class, String)":[53,4,1,""],"Zscore(Matrix, Matrix)":[53,4,1,""],"load(JsonObject)":[53,2,1,""],"load(String)":[53,2,1,""],"normalize(Matrix)":[53,2,1,""]},"mmlib4j.models.svm":{BinarySVC:[55,1,1,""],ClassifierSVC:[56,1,1,""],ClassifierSVCFloat32:[57,1,1,""],ClassifierSVCFloat64:[58,1,1,""],LinearClassifierSVC:[59,1,1,""],LinearClassifierSVCFloat32:[60,1,1,""],LinearClassifierSVCFloat64:[61,1,1,""],LinearSVC:[62,1,1,""],MulticlassSVC:[63,1,1,""],MulticlassStrategy:[64,1,1,""],OneVsOneFloat32:[65,1,1,""],OneVsOneFloat64:[66,1,1,""],SVC:[67,1,1,""],kernels:[73,0,1,""]},"mmlib4j.models.svm.BinarySVC":{"BinarySVC(Class)":[55,4,1,""],"BinarySVC(Class, JsonObject)":[55,4,1,""],"BinarySVC(Class, String)":[55,4,1,""],"BinarySVC(JsonObject)":[55,4,1,""],"BinarySVC(String)":[55,4,1,""],"load(JsonObject)":[55,2,1,""],"load(String)":[55,2,1,""],"predict(Matrix)":[55,2,1,""],"predict(N)":[55,2,1,""]},"mmlib4j.models.svm.ClassifierSVC":{"coef0()":[56,2,1,""],"coefficients()":[56,2,1,""],"degree()":[56,2,1,""],"gamma()":[56,2,1,""],"intercepts()":[56,2,1,""],"interceptsLenght()":[56,2,1,""],"kernel()":[56,2,1,""],"nClasses()":[56,2,1,""],"nRows()":[56,2,1,""],"numColumnsC()":[56,2,1,""],"numColumnsV()":[56,2,1,""],"numRowsC()":[56,2,1,""],"numRowsV()":[56,2,1,""],"vectors()":[56,2,1,""],"weights()":[56,2,1,""]},"mmlib4j.models.svm.ClassifierSVCFloat32":{"coef0()":[57,2,1,""],"coefficients()":[57,2,1,""],"degree()":[57,2,1,""],"gamma()":[57,2,1,""],"intercepts()":[57,2,1,""],"interceptsLenght()":[57,2,1,""],"kernel()":[57,2,1,""],"nClasses()":[57,2,1,""],"nRows()":[57,2,1,""],"numColumnsC()":[57,2,1,""],"numColumnsV()":[57,2,1,""],"numRowsC()":[57,2,1,""],"numRowsV()":[57,2,1,""],"vectors()":[57,2,1,""],"weights()":[57,2,1,""],coef0:[57,3,1,""],coefficients:[57,3,1,""],degree:[57,3,1,""],gamma:[57,3,1,""],intercepts:[57,3,1,""],kernel:[57,3,1,""],nClasses:[57,3,1,""],nRows:[57,3,1,""],numColumnsC:[57,3,1,""],numColumnsV:[57,3,1,""],numRowsC:[57,3,1,""],numRowsV:[57,3,1,""],vectors:[57,3,1,""],weights:[57,3,1,""]},"mmlib4j.models.svm.ClassifierSVCFloat64":{"coef0()":[58,2,1,""],"coefficients()":[58,2,1,""],"degree()":[58,2,1,""],"gamma()":[58,2,1,""],"intercepts()":[58,2,1,""],"interceptsLenght()":[58,2,1,""],"kernel()":[58,2,1,""],"nClasses()":[58,2,1,""],"nRows()":[58,2,1,""],"numColumnsC()":[58,2,1,""],"numColumnsV()":[58,2,1,""],"numRowsC()":[58,2,1,""],"numRowsV()":[58,2,1,""],"vectors()":[58,2,1,""],"weights()":[58,2,1,""],coef0:[58,3,1,""],coefficients:[58,3,1,""],degree:[58,3,1,""],gamma:[58,3,1,""],intercepts:[58,3,1,""],kernel:[58,3,1,""],nClasses:[58,3,1,""],nRows:[58,3,1,""],numColumnsC:[58,3,1,""],numColumnsV:[58,3,1,""],numRowsC:[58,3,1,""],numRowsV:[58,3,1,""],vectors:[58,3,1,""],weights:[58,3,1,""]},"mmlib4j.models.svm.LinearClassifierSVC":{"coefficients()":[59,2,1,""],"intercepts()":[59,2,1,""],"interceptsLength()":[59,2,1,""],"numColumnsC()":[59,2,1,""],"numRowsC()":[59,2,1,""]},"mmlib4j.models.svm.LinearClassifierSVCFloat32":{"coefficients()":[60,2,1,""],"intercepts()":[60,2,1,""],"interceptsLength()":[60,2,1,""],"numColumnsC()":[60,2,1,""],"numRowsC()":[60,2,1,""],coefficients:[60,3,1,""],intercepts:[60,3,1,""],numColumnsC:[60,3,1,""],numRowsC:[60,3,1,""]},"mmlib4j.models.svm.LinearClassifierSVCFloat64":{"coefficients()":[61,2,1,""],"intercepts()":[61,2,1,""],"interceptsLength()":[61,2,1,""],"numColumnsC()":[61,2,1,""],"numRowsC()":[61,2,1,""],coefficients:[61,3,1,""],intercepts:[61,3,1,""],numColumnsC:[61,3,1,""],numRowsC:[61,3,1,""]},"mmlib4j.models.svm.LinearSVC":{"LinearSVC(Class)":[62,4,1,""],"LinearSVC(Class, JsonObject)":[62,4,1,""],"LinearSVC(Class, String)":[62,4,1,""],"LinearSVC(JsonObject)":[62,4,1,""],"LinearSVC(String)":[62,4,1,""],"load(JsonObject)":[62,2,1,""],"load(String)":[62,2,1,""],"predict(Matrix)":[62,2,1,""],"predict(N)":[62,2,1,""]},"mmlib4j.models.svm.MulticlassSVC":{"MulticlassSVC(Class)":[63,4,1,""],"MulticlassSVC(Class, JsonObject)":[63,4,1,""],"MulticlassSVC(Class, String)":[63,4,1,""],"MulticlassSVC(JsonObject)":[63,4,1,""],"MulticlassSVC(String)":[63,4,1,""],"load(JsonObject)":[63,2,1,""],"load(String)":[63,2,1,""],"predict(Matrix)":[63,2,1,""],"predict(N)":[63,2,1,""]},"mmlib4j.models.svm.MulticlassStrategy":{"load(ClassifierSVC, Matrix, Matrix, Scaler, Kernel, Matrix, int[])":[64,2,1,""],"predict(Matrix)":[64,2,1,""]},"mmlib4j.models.svm.OneVsOneFloat32":{"OneVsOneFloat32()":[65,4,1,""],"load(ClassifierSVC, Matrix, Matrix, Scaler, Kernel, Matrix, int[])":[65,2,1,""],"predict(Matrix)":[65,2,1,""]},"mmlib4j.models.svm.OneVsOneFloat64":{"OneVsOneFloat64()":[66,4,1,""],"load(ClassifierSVC, Matrix, Matrix, Scaler, Kernel, Matrix, int[])":[66,2,1,""],"predict(Matrix)":[66,2,1,""]},"mmlib4j.models.svm.SVC":{"SVC()":[67,4,1,""],"SVC(Class)":[67,4,1,""],"SVC(Class, JsonObject)":[67,4,1,""],"SVC(Class, String)":[67,4,1,""],"SVC(JsonObject)":[67,4,1,""],"SVC(String)":[67,4,1,""],"load(JsonObject)":[67,2,1,""],"load(String)":[67,2,1,""],"predict(Matrix)":[67,2,1,""],"predict(N)":[67,2,1,""]},"mmlib4j.models.svm.kernels":{Kernel:[68,1,1,""],Linear:[69,1,1,""],Poly:[70,1,1,""],Rbf:[71,1,1,""],Sigmoid:[72,1,1,""]},"mmlib4j.models.svm.kernels.Kernel":{"Kernel()":[68,4,1,""],"Kernel(String, Number, Number, Number)":[68,4,1,""],"trick(Matrix, Matrix)":[68,2,1,""]},"mmlib4j.models.svm.kernels.Linear":{"trick(Matrix, Matrix)":[69,2,1,""]},"mmlib4j.models.svm.kernels.Poly":{"Poly(Number, Number, Number)":[70,4,1,""],"trick(Matrix, Matrix)":[70,2,1,""]},"mmlib4j.models.svm.kernels.Rbf":{"Rbf(Number)":[71,4,1,""],"trick(Matrix, Matrix)":[71,2,1,""]},"mmlib4j.models.svm.kernels.Sigmoid":{"Sigmoid(Number, Number)":[72,4,1,""],"trick(Matrix, Matrix)":[72,2,1,""]},"mmlib4j.models.svr":{LinearRegressorSVR:[75,1,1,""],LinearRegressorSVRFloat32:[76,1,1,""],LinearRegressorSVRFloat64:[77,1,1,""],LinearSVR:[78,1,1,""],RegressorSVR:[79,1,1,""],RegressorSVRFloat32:[80,1,1,""],RegressorSVRFloat64:[81,1,1,""],SVR:[82,1,1,""]},"mmlib4j.models.svr.LinearRegressorSVR":{"coefficients()":[75,2,1,""],"coefficientsLength()":[75,2,1,""],"intercepts()":[75,2,1,""]},"mmlib4j.models.svr.LinearRegressorSVRFloat32":{"coefficients()":[76,2,1,""],"coefficientsLength()":[76,2,1,""],"intercepts()":[76,2,1,""],coefficients:[76,3,1,""],intercepts:[76,3,1,""]},"mmlib4j.models.svr.LinearRegressorSVRFloat64":{"coefficients()":[77,2,1,""],"coefficientsLength()":[77,2,1,""],"intercepts()":[77,2,1,""],coefficients:[77,3,1,""],intercepts:[77,3,1,""]},"mmlib4j.models.svr.LinearSVR":{"LinearSVR(Class)":[78,4,1,""],"LinearSVR(Class, JsonObject)":[78,4,1,""],"LinearSVR(Class, String)":[78,4,1,""],"LinearSVR(JsonObject)":[78,4,1,""],"LinearSVR(String)":[78,4,1,""],"load(JsonObject)":[78,2,1,""],"load(String)":[78,2,1,""],"predict(Matrix)":[78,2,1,""],"predict(N)":[78,2,1,""]},"mmlib4j.models.svr.RegressorSVR":{"coef0()":[79,2,1,""],"coefficients()":[79,2,1,""],"degree()":[79,2,1,""],"gamma()":[79,2,1,""],"intercepts()":[79,2,1,""],"interceptsLenght()":[79,2,1,""],"kernel()":[79,2,1,""],"numColumnsC()":[79,2,1,""],"numColumnsV()":[79,2,1,""],"numRowsC()":[79,2,1,""],"numRowsV()":[79,2,1,""],"vectors()":[79,2,1,""]},"mmlib4j.models.svr.RegressorSVRFloat32":{"coef0()":[80,2,1,""],"coefficients()":[80,2,1,""],"degree()":[80,2,1,""],"gamma()":[80,2,1,""],"intercepts()":[80,2,1,""],"interceptsLenght()":[80,2,1,""],"kernel()":[80,2,1,""],"numColumnsC()":[80,2,1,""],"numColumnsV()":[80,2,1,""],"numRowsC()":[80,2,1,""],"numRowsV()":[80,2,1,""],"vectors()":[80,2,1,""],coef0:[80,3,1,""],coefficients:[80,3,1,""],degree:[80,3,1,""],gamma:[80,3,1,""],intercepts:[80,3,1,""],kernel:[80,3,1,""],numColumnsC:[80,3,1,""],numColumnsV:[80,3,1,""],numRowsC:[80,3,1,""],numRowsV:[80,3,1,""],vectors:[80,3,1,""]},"mmlib4j.models.svr.RegressorSVRFloat64":{"coef0()":[81,2,1,""],"coefficients()":[81,2,1,""],"degree()":[81,2,1,""],"gamma()":[81,2,1,""],"intercepts()":[81,2,1,""],"interceptsLenght()":[81,2,1,""],"kernel()":[81,2,1,""],"numColumnsC()":[81,2,1,""],"numColumnsV()":[81,2,1,""],"numRowsC()":[81,2,1,""],"numRowsV()":[81,2,1,""],"vectors()":[81,2,1,""],coef0:[81,3,1,""],coefficients:[81,3,1,""],degree:[81,3,1,""],gamma:[81,3,1,""],intercepts:[81,3,1,""],kernel:[81,3,1,""],numColumnsC:[81,3,1,""],numColumnsV:[81,3,1,""],numRowsC:[81,3,1,""],numRowsV:[81,3,1,""],vectors:[81,3,1,""]},"mmlib4j.models.svr.SVR":{"SVR(Class)":[82,4,1,""],"SVR(Class, JsonObject)":[82,4,1,""],"SVR(Class, String)":[82,4,1,""],"SVR(JsonObject)":[82,4,1,""],"SVR(String)":[82,4,1,""],"load(JsonObject)":[82,2,1,""],"load(String)":[82,2,1,""],"predict(Matrix)":[82,2,1,""],"predict(N)":[82,2,1,""]},"mmlib4j.models.transfer":{Identity:[84,1,1,""],Logistic:[85,1,1,""],Relu:[86,1,1,""],Softmax:[87,1,1,""],Tanh:[88,1,1,""],Transfer:[89,1,1,""]},"mmlib4j.models.transfer.Identity":{"activate(Matrix)":[84,2,1,""]},"mmlib4j.models.transfer.Logistic":{"activate(Matrix)":[85,2,1,""]},"mmlib4j.models.transfer.Relu":{"activate(Matrix)":[86,2,1,""]},"mmlib4j.models.transfer.Softmax":{"activate(Matrix)":[87,2,1,""]},"mmlib4j.models.transfer.Tanh":{"activate(Matrix)":[88,2,1,""]},"mmlib4j.models.transfer.Transfer":{"Transfer()":[89,4,1,""],"Transfer(String)":[89,4,1,""],"activate(Matrix)":[89,2,1,""]},"mmlib4j.primitives":{Primitives:[91,1,1,""]},"mmlib4j.primitives.Primitives":{"Primitives(ComponentTree)":[91,4,1,""],"Primitives(ComponentTree, ArrayList)":[91,4,1,""],"getMappingSelectedNodes()":[91,2,1,""],"intersect()":[91,2,1,""],"setMappingSelectedNodes(boolean[])":[91,2,1,""]},"mmlib4j.targets":{BoundBox:[93,1,1,""],BoundingBoxMatching:[94,1,1,""],ShapeMatching:[95,1,1,""],Target:[96,1,1,""]},"mmlib4j.targets.BoundBox":{"BoundBox()":[93,4,1,""],"BoundBox(int, int, int, int)":[93,4,1,""],"area()":[93,2,1,""],"area(int, int, int, int)":[93,2,1,""],"bestMatch(List, BoundBox)":[93,2,1,""],"match(BoundBox)":[93,2,1,""],"overlapArea(BoundBox)":[93,2,1,""],"setBoundbox(int, int, int, int)":[93,2,1,""],"unionArea(BoundBox)":[93,2,1,""],x1:[93,3,1,""],x2:[93,3,1,""]},"mmlib4j.targets.BoundingBoxMatching":{"BoundingBoxMatching(File)":[94,4,1,""],"getListGT()":[94,2,1,""],"load(File)":[94,2,1,""],"match(NodeLevelSets)":[94,2,1,""],"setListGT(List)":[94,2,1,""]},"mmlib4j.targets.ShapeMatching":{"ShapeMatching()":[95,4,1,""],"ShapeMatching(MorphologicalTreeFiltering)":[95,4,1,""],"match(NodeLevelSets)":[95,2,1,""],"match(NodeLevelSets, NodeLevelSets)":[95,2,1,""],bestNode:[95,3,1,""]},"mmlib4j.targets.Target":{"match(NodeLevelSets)":[96,2,1,""]},"mmlib4j.utils":{Random:[98,1,1,""]},"mmlib4j.utils.Random":{instance:[98,3,1,""]},mmlib4j:{debug:[5,0,1,""],features:[12,0,1,""],files:[18,0,1,""],models:[41,0,1,""],primitives:[92,0,1,""],targets:[97,0,1,""],utils:[99,0,1,""]}},objnames:{"0":["java","package","Java package"],"1":["java","type","Java type"],"2":["java","method","Java method"],"3":["java","field","Java field"],"4":["java","constructor","Java constructor"]},objtypes:{"0":"java:package","1":"java:type","2":"java:method","3":"java:field","4":"java:constructor"},terms:{"abstract":[1,20],"boolean":[6,10,14,15,17,24,91],"class":[1,2,3,4,6,8,9,10,11,13,15,16,17,19,20,21,22,23,24,27,28,29,30,31,32,33,35,36,38,39,43,44,45,46,48,49,50,51,52,53,55,57,58,60,61,62,63,64,65,66,67,68,69,70,71,72,76,77,78,80,81,82,84,85,86,87,88,89,91,93,94,95,98],"final":[22,23,52,55,98],"float":[21,22,24,27,32,38,57,60,65,76,80],"int":[6,7,8,9,10,11,20,21,22,23,24,26,27,28,31,32,33,37,38,39,56,57,58,59,60,61,64,65,66,75,76,77,79,80,81,93],"public":[1,2,3,4,6,7,8,9,10,11,13,14,15,16,17,19,20,21,22,23,24,26,27,28,29,30,31,32,33,35,36,37,38,39,42,43,44,45,46,48,49,50,51,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,75,76,77,78,79,80,81,82,84,85,86,87,88,89,91,93,94,95,96,98],"return":21,"static":[1,3,4,15,21,22,23,24,93,98],"void":[1,2,3,4,6,7,8,9,10,11,13,15,16,20,22,23,24,35,91,93,94],abstractmatrix:[21,22,23,24,25,100],accumulatedattributeinpath:6,algebra:[25,100],all:11,alpha:21,also:[21,50,51,53],arraylist:[6,15,91],arraytyp:24,ascendantspath:6,attribut:[10,11],author:[21,50,51,53],axi:[20,22,23,24],between:21,bia:35,binarysvc:[74,100],binarytre:95,bla:21,boundbox:[94,97,100],boundingboxmatch:[97,100],charl:[21,50,51,53],classifi:[27,28,34,100],classifierfloat32:[34,100],classifierfloat64:[34,100],classifiersvc:[57,58,64,65,66,74,100],classifiersvcfloat32:[74,100],classifiersvcfloat64:[74,100],clf:[64,65,66],coef0:[68,70,72],coeffici:[64,65,66],col:[20,22,23,24],colorimag:[7,8],column:[21,37,38,39],componenttre:91,connectedfilteringbycomponenttre:[6,7,9,10,11],contrastattribut:6,data:[19,24,29,30,36,55,62,63,67,78,82],datafil:[15,18,100],datagroup:[17,18,100],dataload:[18,100],datanam:13,datasetsfil:15,datastruct:[50,51,53,100],datawrit:[6,18,100],debug:[2,3,4,100],debugnon:[5,100],debugtask:[5,100],debugtim:[5,100],deep:24,degre:[68,70],delta:[6,10],descendantspath:6,doubl:[6,10,16,21,23,24,28,33,39,58,61,66,77,81,93,94,95,96],estim:93,estimatedelta:10,expon:[20,22,23,24],extend:[2,3,4,9,10,11,22,23,29,30,36,48,49,50,52,53,55,62,63,67,69,70,71,72,78,82,84,85,86,87,88],extens:16,extractfeatur:[12,100],featur:[9,10,11,100],featurebodi:[9,10,11,12,100],featureid:[9,10,11],featurenam:[9,10,11],ferreira:[21,50,51,53],file:[13,14,15,17,94,100],filenam:[6,15,16],fileset:15,float32:[21,25,100],float64:[21,25,100],format:[20,22,23,24],gamma:[68,70,71,72],gobber:[21,50,51,53],ground:[94,95],groupbynumb:[18,100],hashset:9,have:21,ident:[90,100],identityscal:[54,100],imgrgb:7,implement:[9,10,11,17,27,28,32,33,38,39,43,44,45,46,50,53,57,58,60,61,65,66,76,77,80,81,94,95],includ:11,inputpath:15,intercept:[64,65,66],interfac:[7,14,26,31,37,42,56,59,64,75,79,96],java:98,javadoc:0,jsonobject:[19,29,30,36,49,50,51,52,53,55,62,63,67,78,82],kernel:[64,65,66,69,70,71,72,100],kerneltyp:68,layer:[40,100],let:21,line:16,linear:[73,100],linearclassifiersvc:[60,61,74,100],linearclassifiersvcfloat32:[74,100],linearclassifiersvcfloat64:[74,100],linearregress:[34,100],linearregressorsvr:[76,77,83,100],linearregressorsvrfloat32:[83,100],linearregressorsvrfloat64:[83,100],linearsvc:[74,100],linearsvr:[83,100],list:[6,9,13,15,93,94],listgt:[93,94],load:11,loadattribut:11,logist:[90,100],logisticregress:[34,100],mappingstrategyofprun:91,matrix:[6,16,19,20,21,22,23,25,29,30,35,36,42,43,44,45,46,48,49,50,51,52,53,55,62,63,64,65,66,67,68,69,70,71,72,78,82,84,85,86,87,88,89,100],matrixold:53,max:50,maxarea:10,maxvari:10,mean:[53,54,100],meanvolumefeatur:[12,100],min:50,minarea:10,minmax:[51,54,100],mlp:[40,100],mmlib4j:100,model:[29,30,36,51,62,67,78,82,100],modeldata:[19,29,30,36,49,50,51,52,53,55,62,63,67,78,82],modeltyp:[19,29,30,36,55,62,63,67,78,82],morphologicaltreefilt:95,mserfeatur:[12,100],msg:[1,2,3,4],multiclassstrategi:[65,66,74,100],multiclasssvc:[74,100],multipl:21,netlib:21,network:[38,39,40,100],networkfloat32:[40,100],networkfloat64:[40,100],neural_network:100,node:[6,9,94,95,96],nodeasc:6,nodect:9,noded:6,nodelevelset:[6,9,94,95,96],nodesnr:91,normalfeatur:[12,100],note:21,number:[20,22,23,24,56,57,58,68,70,71,72,79,80,81],numcolumn:[20,22,23],numrow:[20,22,23],observ:21,onevsonefloat32:[74,100],onevsonefloat64:[74,100],oper:21,output:[42,43,44,45,46],outputdir:6,outputpath:[13,15],overwrit:21,paramet:21,parameter:11,pattern:13,perform:21,poli:[73,100],postprocess:[43,44,45,46,100],postprocessingbinari:[47,100],postprocessingident:[47,100],postprocessinglinear:[47,100],postprocessingmulticlass:[47,100],preprocess:100,primit:100,printhead:6,protect:19,random:[99,100],rbf:[73,100],regress:[32,33,34,100],regressionfloat32:[34,100],regressionfloat64:[34,100],regressorsvr:[80,81,83,100],regressorsvrfloat32:[83,100],regressorsvrfloat64:[83,100],relu:[90,100],result:21,row:[6,21,37,38,39],rowvector:24,sampl:16,scalar:21,scaler:[48,49,50,52,53,54,64,65,66,100],scalertyp:[49,50,51,52,53],see:[21,50,51,53],separ:[6,16,20,22,23,24],set:21,shapematch:[97,100],sigmoid:[73,100],size:21,softmax:[90,100],some:21,sourc:[20,22,23],standarddevi:[54,100],std:[52,53],string:[1,2,3,4,6,7,8,9,10,11,13,15,16,19,20,22,23,24,29,30,36,37,38,39,49,50,51,52,53,55,56,57,58,62,63,67,68,78,79,80,81,82,89],summat:21,svc:[55,63,74,100],svm:100,svr:100,tanh:[90,100],target:[6,94,95,100],thi:[21,50,51,53],thu:21,transfer:[35,84,85,86,87,88,100],tree:[6,7,9,10,11,91],two:21,type:21,util:[98,100],valu:[20,22,23,24],vector:[64,65,66,68,69,70,71,72],weigth:35,where:21,wrapper:21,zero:21,zscore:[50,51,54,100]},titles:["Home","Debug","DebugNone","DebugTask","DebugTime","mmlib4j.debug","ExtractFeatures","Feature","FeatureBody","MeanVolumeFeatureR","MserFeature","NormalFeature","mmlib4j.features","DataFile","DataGroup","DataLoader","DataWriter","GroupByNumber","mmlib4j.files","Models","AbstractMatrix","Algebra","Float32","Float64","Matrix","mmlib4j.models.datastruct","Classifier","ClassifierFloat32","ClassifierFloat64","LinearRegression","LogisticRegression","Regression","RegressionFloat32","RegressionFloat64","mmlib4j.models.linear","Layer","MLP","Network","NetworkFloat32","NetworkFloat64","mmlib4j.models.neural_network","mmlib4j.models","PostProcessing","PostProcessingBinary","PostProcessingIdentity","PostProcessingLinear","PostProcessingMulticlass","mmlib4j.models.postprocessing","IdentityScaler","Mean","MinMax","Scaler","StandardDeviation","Zscore","mmlib4j.models.preprocessing","BinarySVC","ClassifierSVC","ClassifierSVCFloat32","ClassifierSVCFloat64","LinearClassifierSVC","LinearClassifierSVCFloat32","LinearClassifierSVCFloat64","LinearSVC","MulticlassSVC","MulticlassStrategy","OneVsOneFloat32","OneVsOneFloat64","SVC","Kernel","Linear","Poly","Rbf","Sigmoid","mmlib4j.models.svm.kernels","mmlib4j.models.svm","LinearRegressorSVR","LinearRegressorSVRFloat32","LinearRegressorSVRFloat64","LinearSVR","RegressorSVR","RegressorSVRFloat32","RegressorSVRFloat64","SVR","mmlib4j.models.svr","Identity","Logistic","Relu","Softmax","Tanh","Transfer","mmlib4j.models.transfer","Primitives","mmlib4j.primitives","BoundBox","BoundingBoxMatching","ShapeMatching","Target","mmlib4j.targets","Random","mmlib4j.utils","Javadoc"],titleterms:{"var":[20,24],abstractmatrix:20,activ:[35,84,85,86,87,88,89],addattributeinnod:9,addattributeinnodesct:9,algebra:21,area:93,argmax:[20,22,23,24],argmin:[20,22,23,24],attr:6,bestmatch:93,bestnod:95,bia:[37,38,39],biaslength:[37,38,39],biggerthen:[20,22,23,24],biggertheni:[20,24],binarysvc:55,boundbox:93,boundingboxmatch:94,classifi:26,classifierfloat32:27,classifierfloat64:28,classifiersvc:56,classifiersvcfloat32:57,classifiersvcfloat64:58,clone:[20,22,23],close:16,coef0:[56,57,58,79,80,81],coeffici:[26,27,28,31,32,33,56,57,58,59,60,61,75,76,77,79,80,81],coefficientslength:[31,32,33,75,76,77],colargmax:[22,23],colargmin:[22,23],column:[20,22,23,24],constructor:[6,9,10,11,13,15,19,24,29,30,35,36,49,50,51,52,53,55,62,63,65,66,67,68,70,71,72,78,82,89,91,93,94,95],copi:[20,24],creat:[16,20,22,23],datafil:13,datagroup:14,dataload:15,datastruct:25,datawrit:16,debug:[1,5],debugnon:2,debugtask:3,debugtim:4,degre:[56,57,58,79,80,81],dir:15,div:[20,22,23,24],divi:[20,22,23,24],dminu:21,dot:[20,22,23,24],dott:[20,22,23,24],dplu:21,end:[1,2,3,4],execut:[42,43,44,45,46],exp:[20,22,23,24],expi:[20,24],extractfeatur:6,featur:[7,12],featurebodi:8,featureextractionofascend:6,featureextractionofdescend:6,featureid:8,featurenam:8,field:[1,6,8,22,23,27,28,32,33,57,58,60,61,76,77,80,81,93,95,98],file:18,fill:[20,22,23,24],filter:13,find:6,float32:22,float64:23,fminu:21,fplu:21,gamma:[56,57,58,79,80,81],getaccumulatedattributeinpath:6,getascendantspath:6,getbia:35,getdata:24,getdatanam:13,getdescendantspath:6,getextens:16,getfeatureid:[7,8],getfeaturenam:[7,8],getfil:13,getimgrgb:[7,8],getindex:20,getinst:1,getlistgt:94,getlistoffil:15,getmappingselectednod:91,getnodesascendantspath:6,getsepar:[16,24],gettarget:6,gettransf:35,gettre:6,getweigth:35,groupbynumb:17,head:[20,22,23,24],header:6,hidden_activ:[37,38,39],home:0,ident:84,identityscal:48,imgrgb:8,instanc:[1,22,23,98],intercept:[26,27,28,31,32,33,56,57,58,59,60,61,75,76,77,79,80,81],interceptslenght:[56,57,58,79,80,81],interceptslength:[26,27,28,59,60,61],intersect:91,isgroup:[14,17],isscalar:24,isvalidextens:15,javadoc:100,kernel:[56,57,58,68,73,79,80,81],layer:35,length:[20,22,23,24],lessthen:[20,22,23,24],lesstheni:[20,24],linear:[34,69],linearclassifiersvc:59,linearclassifiersvcfloat32:60,linearclassifiersvcfloat64:61,linearregress:29,linearregressorsvr:75,linearregressorsvrfloat32:76,linearregressorsvrfloat64:77,linearsvc:62,linearsvr:78,load:[6,15,19,29,30,36,49,50,51,52,53,55,62,63,64,65,66,67,78,82,94],loadfeatur:[7,9,10,11],logist:85,logisticregress:30,match:[93,94,95,96],matrix:24,max:[20,22,23,24],maxattributedescendantspath:6,maxi:[20,24],mean:[20,24,49],meann:[20,22,23,24],meanvolumefeatur:9,method:[1,2,3,4,6,7,8,9,10,11,13,14,15,16,17,19,20,21,22,23,24,26,27,28,29,30,31,32,33,35,36,37,38,39,42,43,44,45,46,48,49,50,51,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,75,76,77,78,79,80,81,82,84,85,86,87,88,89,91,93,94,95,96],min:[20,22,23,24],minmax:50,minu:[20,22,23,24],minusi:[20,22,23,24],minusn:[20,22,23,24],minusni:[20,22,23,24],mlp:36,mmlib4j:[5,12,18,25,34,40,41,47,54,73,74,83,90,92,97,99],model:[19,25,34,40,41,47,54,73,74,83,90],mserfeatur:10,mul:[20,22,23,24],muli:[20,22,23,24],multadd:21,multiclassstrategi:64,multiclasssvc:63,nclass:[56,57,58],neg:[20,22,23,24],negi:[20,24],network:37,networkfloat32:38,networkfloat64:39,neural_network:40,newinst:[3,4],nodesnr:6,normal:[48,49,50,51,52,53],normalfeatur:11,nrow:[56,57,58],numcolumn:[24,26,27,28,37,38,39],numcolumnsc:[56,57,58,59,60,61,79,80,81],numcolumnsv:[56,57,58,79,80,81],numrow:[24,26,27,28,37,38,39],numrowsc:[56,57,58,59,60,61,79,80,81],numrowsv:[56,57,58,79,80,81],one:[20,24],ones:24,onevsonefloat32:65,onevsonefloat64:66,output:13,output_activ:[37,38,39],overlaparea:93,plu:[20,22,23,24],plusi:[20,22,23,24],plusn:[20,22,23,24],plusni:[20,22,23,24],poli:70,postprocess:[42,47],postprocessingbinari:43,postprocessingident:44,postprocessinglinear:45,postprocessingmulticlass:46,pow2:[20,22,23,24],pow2i:[20,24],pow:[20,22,23,24],powi:[20,24],predict:[19,29,30,36,55,62,63,64,65,66,67,78,82],prefix:13,preprocess:54,primit:[91,92],print:[20,22,23,24],probabl:30,rand:[20,22,23,24],randn:[20,22,23,24],random:98,rbf:71,rdiv:[20,22,23,24],rdivi:[20,24],regress:31,regressionfloat32:32,regressionfloat64:33,regressorsvr:79,regressorsvrfloat32:80,regressorsvrfloat64:81,relu:86,row:[20,22,23,24],rowargmax:[22,23],rowargmin:[22,23],sampl:6,save:6,scaler:51,set:[20,22,23,24],setaccumulatedattributeinpath:6,setascendantspath:6,setbia:35,setboundbox:93,setdata:24,setdatanam:13,setdescendantspath:6,setextens:16,setfil:13,setimgrgb:[7,8],setlistgt:94,setlistoffil:15,setmappingselectednod:91,setsepar:[16,24],settarget:6,settransf:35,settre:6,setweigth:35,shape:24,shapematch:95,show:[1,2,3,4],sigmoid:[20,22,23,24,72],sigmoidi:[20,24],softmax:87,sqrt:[20,22,23,24],sqrti:[20,24],standarddevi:52,start:[1,2,3,4],std:[20,24],stdn:[20,24],sum:[20,22,23,24],sumn:[20,22,23,24],svc:67,svm:[73,74],svr:[82,83],tanh:[20,22,23,24,88],tanhi:[20,24],target:[96,97],tdot:[20,22,23,24],tdott:[20,22,23,24],threshold:[20,24],thresholdi:[20,24],tostr:[20,22,23,24],transabmultadd:21,transamultadd:21,transbmultadd:21,transfer:[89,90],trick:[68,69,70,71,72],type:[20,22,23,24,31,32,33],unionarea:93,util:99,varn:[20,24],vector:[56,57,58,79,80,81],weight:[37,38,39,56,57,58],write:[6,16],zero:[20,24],zscore:53}})